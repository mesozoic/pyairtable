#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
import os
import sys
import typing

import pyairtable.api.types
import pyairtable.orm.fields
from pyairtable import __version__ as version

if typing.TYPE_CHECKING:
    import sphinx.util.tags


extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.todo",
    "sphinx.ext.coverage",
    "sphinx.ext.viewcode",
    "sphinx.ext.githubpages",
    "sphinx.ext.napoleon",
    "sphinxext.opengraph",
    "sphinx.ext.autosectionlabel",
    # "autoapi.extension",
    "sphinx_autodoc_typehints",
    "sphinxcontrib.autodoc_pydantic",
    "sphinxcontrib.gtagjs",
]

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# Open Graph extension config. https://pypi.org/project/sphinxext-opengraph/
ogp_site_url = "https://pyairtable.readthedocs.io/"
ogp_image = "https://pyairtable.readthedocs.io/en/master/_images/logo.png"
ogp_description_length = 300

ogp_custom_meta_tags = [
    '<meta name="twitter:card" content="summary_large_image">',
]

# See https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html
autodoc_class_signature = "separated"
autodoc_default_options = {
    "exclude-members": "__new__",
}
autodoc_member_order = "bysource"
autoclass_content = "class"

# See https://autodoc-pydantic.readthedocs.io/en/v1.9.0/users/configuration.html
autodoc_pydantic_field_show_alias = False
autodoc_pydantic_field_show_default = False
autodoc_pydantic_field_show_required = False
autodoc_pydantic_model_member_order = "bysource"
autodoc_pydantic_model_show_config_summary = False
autodoc_pydantic_model_show_field_summary = False
autodoc_pydantic_model_show_json = False

# See https://github.com/tox-dev/sphinx-autodoc-typehints#options
typehints_defaults = "comma"
typehints_use_signature = True
typehints_use_signature_return = True


def typehints_formatter(annotation, config):
    """
    Provide links from function signatures to TypedDict docstrings.
    """
    for name, value in vars(pyairtable.api.types).items():
        if annotation != value:
            continue
        if isinstance(value, type) and issubclass(value, dict):  # TypedDict
            return f":data:`~pyairtable.api.types.{name}`"
        # At this point there's no way to determine whether an annotation
        # which was evaluated to Dict[str, Any] is Fields or something unrelated,
        # so we limit this formatter to just type aliases which we *know* are unique.
        # TODO: get *all* type alias annotations properly reflected in docs.
        if name in ("WritableFieldValue", "WritableField"):
            return f":data:`~pyairtable.api.types.{name}`"

    if annotation == typing.Literal[pyairtable.orm.fields._LinkFieldOptions.LinkSelf]:
        return ":data:`~pyairtable.orm.fields.LinkSelf`"
    if annotation == pyairtable.orm.fields.T_Linked:
        return ":class:`~pyairtable.orm.Model`"

    return None


# Needed for autoapi to not choke on retrying.Retry
suppress_warnings = ["autoapi.python_import_resolution"]


# This allows us to insert a warning on the 'latest' build; see _warn_latest.rst
# and https://www.sphinx-doc.org/en/master/usage/configuration.html#conf-tags
# and https://docs.readthedocs.io/en/stable/reference/environment-variables.html
if _rtfd_version := os.environ.get("READTHEDOCS_VERSION"):
    tags: "sphinx.util.tags.Tags"  # this is just to help type-checking IDEs
    tags.add(f"readthedocs_{_rtfd_version}")  # noqa


################################
# CUSTOM
################################

source_dir = os.path.dirname(__file__)
doc_dir = os.path.dirname(source_dir)
root_dir = os.path.dirname(doc_dir)
sys.path.append(root_dir)

# Document Python Code
autoapi_type = "python"
autoapi_dirs = [os.path.join(root_dir, "pyairtable")]
# add_module_names = False

napoleon_google_docstring = True
napoleon_include_init_with_doc = True
napoleon_attr_annotations = True
# napoleon_preprocess_types = True  # True to convert the type definitions in the docstrings as references. Defaults to False.
# napoleon_type_aliases = None
# napoleon_attr_annotations = True
# napoleon_use_param = True

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.

__version__ = version.split("-", 0)
__release__ = version

################################
# CUSTOM
################################

source_suffix = ".rst"
master_doc = "index"

# General information about the project.
project = "pyAirtable"
copyright = "2021, Gui Talarico"
author = "Gui Talarico"


# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
# pygments_style = "sphinx"
pygments_style = "monokai"

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

gtagjs_ids = [
    "UA-3836052-10",
]

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
html_theme = "furo"
html_title = "pyAirtable documentation"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {}

# html_logo = 'demo/static/logo.svg'
html_logo = "_static/logo-text.svg"

html_context = {
    "theme_sidebar_hide_name": True,
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']
html_css_files = ["custom.css"]
# html_js_files = []
